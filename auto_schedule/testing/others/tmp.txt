65ms version:

produce compute {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 1024
  // attr [compute.local] storage_scope = "local"
  allocate compute.local[float32 * 32]
  // attr [pad_temp.shared] storage_scope = "shared"
  allocate pad_temp.shared[float32 * 180]
  // attr [kernel.shared] storage_scope = "shared"
  allocate kernel.shared[float32 * 576]
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 1
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 7
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2
  produce compute.local {
    unrolled (ff.c.init, 0, 2) {
      unrolled (yy.c.init, 0, 4) {
        unrolled (xx.c.init, 0, 2) {
          compute.local[((((ff.c.init*4) + yy.c.init)*2) + xx.c.init)] = 0.000000f
          compute.local[(((((ff.c.init*4) + yy.c.init)*2) + xx.c.init) + 16)] = 0.000000f
        }
      }
    }
    for (rc.outer, 0, 512) {
      produce pad_temp.shared {
        // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
        // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
        // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2
        if (likely(((((threadIdx.z*6) + threadIdx.y)*2) < (180 - threadIdx.x)))) {
          if (likely(((threadIdx.y*2) < (12 - threadIdx.x)))) {
            if (likely(((blockIdx.z/16) < (64 - (((((threadIdx.z*6) + threadIdx.y)*2) + threadIdx.x)/180))))) {
              pad_temp.shared[((((threadIdx.z*2) + (((threadIdx.y*2) + threadIdx.x)/6))*6) + (((threadIdx.y*2) + threadIdx.x) % 6))] = tvm_if_then_else(((((1 <= ((((((threadIdx.z*6) + threadIdx.y)*2) + threadIdx.x)/6) % 30)) && (((((((threadIdx.z*6) + threadIdx.y)*2) + threadIdx.x)/6) % 30) < 29)) && ((1 - (((threadIdx.y*2) + threadIdx.x) % 6)) <= (blockIdx.x*4))) && ((blockIdx.x*4) < (29 - (((threadIdx.y*2) + threadIdx.x) % 6)))), data[(((((((((blockIdx.z/16)*100352) + blockIdx.x) + (rc.outer*196)) + ((((threadIdx.z*2) + (((threadIdx.y*2) + threadIdx.x)/6))/30)*100352)) + ((((threadIdx.z*2) + (((threadIdx.y*2) + threadIdx.x)/6)) % 30)*7))*4) + (((threadIdx.y*2) + threadIdx.x) % 6)) + -29)], 0.000000f)
            }
          }
        }
      }
      produce kernel.shared {
        // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
        // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
        // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2
        unrolled (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 3) {
          if (likely(((((threadIdx.z*6) + threadIdx.y)*2) < (192 - threadIdx.x)))) {
            if (likely(((((((threadIdx.z*6) + threadIdx.y)*2) + threadIdx.x)*3) < (576 - ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)))) {
              if (likely(((((threadIdx.y*2) + threadIdx.x)*3) < (36 - ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)))) {
                if (likely((((blockIdx.z % 16)*64) < (1024 - (((((threadIdx.z*6) + threadIdx.y)*2) + threadIdx.x)/3))))) {
                  kernel.shared[((((threadIdx.z*36) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) + ((((threadIdx.y*2) + threadIdx.x)/3)*9)) + ((((threadIdx.y*2) + threadIdx.x) % 3)*3))] = kernel[((((((((blockIdx.z % 16)*32768) + rc.outer) + (threadIdx.z*2048))*9) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) + ((((threadIdx.y*2) + threadIdx.x)/3)*4608)) + ((((threadIdx.y*2) + threadIdx.x) % 3)*3))]
                }
              }
            }
          }
        }
      }
      unrolled (ry.inner, 0, 3) {
        unrolled (rx.inner, 0, 3) {
          unrolled (ff.c, 0, 2) {
            unrolled (yy.c, 0, 4) {
              unrolled (xx.c, 0, 2) {
                compute.local[((((ff.c*4) + yy.c)*2) + xx.c)] = (compute.local[((((ff.c*4) + yy.c)*2) + xx.c)] + (pad_temp.shared[(((((((threadIdx.y*12) + threadIdx.x) + (ry.inner*3))*2) + rx.inner) + (yy.c*6)) + xx.c)]*kernel.shared[(((((threadIdx.z*6) + ry.inner)*3) + rx.inner) + (ff.c*9))]))
                compute.local[(((((ff.c*4) + yy.c)*2) + xx.c) + 16)] = (compute.local[(((((ff.c*4) + yy.c)*2) + xx.c) + 16)] + (pad_temp.shared[(((((((threadIdx.y*12) + threadIdx.x) + (ry.inner*3))*2) + rx.inner) + (yy.c*6)) + xx.c)]*kernel.shared[((((((threadIdx.z*6) + ry.inner)*3) + rx.inner) + (ff.c*9)) + 288)]))
              }
            }
          }
        }
      }
    }
  }
  unrolled (ff.inner.inner.inner, 0, 2) {
    unrolled (yy.inner.inner.inner, 0, 4) {
      unrolled (xx.inner.inner.inner, 0, 2) {
        compute[((((((((((blockIdx.z*12544) + blockIdx.x) + (threadIdx.z*392)) + (threadIdx.y*28))*2) + threadIdx.x) + (ff.inner.inner.inner*392)) + (yy.inner.inner.inner*14))*2) + xx.inner.inner.inner)] = compute.local[((((ff.inner.inner.inner*4) + yy.inner.inner.inner)*2) + xx.inner.inner.inner)]
        compute[(((((((((((blockIdx.z*12544) + blockIdx.x) + (threadIdx.z*392)) + (threadIdx.y*28))*2) + threadIdx.x) + (ff.inner.inner.inner*392)) + (yy.inner.inner.inner*14))*2) + xx.inner.inner.inner) + 25088)] = compute.local[(((((ff.inner.inner.inner*4) + yy.inner.inner.inner)*2) + xx.inner.inner.inner) + 16)]
      }
    }
  }
}

Use 65.509280(ms)
Done!


78ms version:

produce compute {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 1024
  // attr [compute.local] storage_scope = "local"
  allocate compute.local[float32 * 32]
  // attr [compute.shared] storage_scope = "shared"
  allocate compute.shared[float32 * 180]
  // attr [placeholder.shared] storage_scope = "shared"
  allocate placeholder.shared[float32 * 576]
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 1
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 7
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2
  produce compute.local {
    unrolled (c.c.init, 0, 2) {
      unrolled (h.c.init, 0, 4) {
        unrolled (w.c.init, 0, 2) {
          compute.local[((((c.c.init*4) + h.c.init)*2) + w.c.init)] = 0.000000f
          compute.local[(((((c.c.init*4) + h.c.init)*2) + w.c.init) + 16)] = 0.000000f
        }
      }
    }
    for (rv.inner.outer, 0, 512) {
      produce compute.shared {
        if (likely(((((threadIdx.z*7) + threadIdx.y)*2) < (180 - threadIdx.x)))) {
          if (likely(((threadIdx.z*7) < (90 - threadIdx.y)))) {
            if (likely((threadIdx.z < 13))) {
              if (likely(((blockIdx.z/16) < (64 - (((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x)/180))))) {
                compute.shared[(((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x)/180)*180) + ((((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x)/6) % 30)*6) + ((((threadIdx.z + threadIdx.y)*2) + threadIdx.x) % 6)))] = tvm_if_then_else(((((1 <= ((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x)/6) % 30)) && (((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x)/6) % 30) < 29)) && ((1 - ((((threadIdx.z + threadIdx.y)*2) + threadIdx.x) % 6)) <= (blockIdx.x*4))) && ((blockIdx.x*4) < (29 - ((((threadIdx.z + threadIdx.y)*2) + threadIdx.x) % 6)))), placeholder[(((((((((blockIdx.z/16)*100352) + blockIdx.x) + ((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x)/180)*100352))*4) + ((((threadIdx.z + threadIdx.y)*2) + threadIdx.x) % 6)) + (((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x)/6) % 30)*28)) + (rv.inner.outer*784)) + -29)], 0.000000f)
              }
            }
          }
        }
      }
      produce placeholder.shared {
        unrolled (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer, 0, 3) {
          if (likely(((((threadIdx.z*7) + threadIdx.y)*2) < ((576 - (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*224)) - threadIdx.x)))) {
            if (likely(((threadIdx.z*7) < ((288 - (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*112)) - threadIdx.y)))) {
              if (likely((threadIdx.z < (42 - (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*16))))) {
                if (likely((((blockIdx.z % 16)*64) < (1024 - ((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*224))/9))))) {
                  placeholder.shared[((((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*224))/9)*9) + (((((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*224))/3) % 3)*3) + (((((threadIdx.z + threadIdx.y)*2) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*2)) % 3)))] = placeholder[((((((blockIdx.z % 16)*32768) + rv.inner.outer) + (((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*224))/9)*512))*9) + (((((((((threadIdx.z*7) + threadIdx.y)*2) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*224))/3) % 3)*3) + (((((threadIdx.z + threadIdx.y)*2) + threadIdx.x) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*2)) % 3)))]
                }
              }
            }
          }
        }
      }
      unrolled (rv.inner.inner, 0, 3) {
        unrolled (rv.inner.inner, 0, 3) {
          unrolled (c.c, 0, 2) {
            unrolled (h.c, 0, 4) {
              unrolled (w.c, 0, 2) {
                compute.local[((((c.c*4) + h.c)*2) + w.c)] = (compute.local[((((c.c*4) + h.c)*2) + w.c)] + (compute.shared[(((((((threadIdx.y*12) + threadIdx.x)*2) + rv.inner.inner) + (rv.inner.inner*6)) + (h.c*6)) + w.c)]*placeholder.shared[((((threadIdx.z*18) + rv.inner.inner) + (rv.inner.inner*3)) + (c.c*9))]))
                compute.local[(((((c.c*4) + h.c)*2) + w.c) + 16)] = (compute.local[(((((c.c*4) + h.c)*2) + w.c) + 16)] + (compute.shared[(((((((threadIdx.y*12) + threadIdx.x)*2) + rv.inner.inner) + (rv.inner.inner*6)) + (h.c*6)) + w.c)]*placeholder.shared[(((((threadIdx.z*18) + rv.inner.inner) + (rv.inner.inner*3)) + (c.c*9)) + 288)]))
              }
            }
          }
        }
      }
    }
  }
  unrolled (b.inner.inner.inner.inner.c.inner.inner.inner.fused, 0, 2) {
    unrolled (h.inner.inner.inner, 0, 4) {
      unrolled (w.inner.inner.inner, 0, 2) {
        compute[((((((((((blockIdx.z*12544) + blockIdx.x) + (threadIdx.z*392)) + (threadIdx.y*28))*2) + threadIdx.x) + (b.inner.inner.inner.inner.c.inner.inner.inner.fused*392)) + (h.inner.inner.inner*14))*2) + w.inner.inner.inner)] = compute.local[((((b.inner.inner.inner.inner.c.inner.inner.inner.fused*4) + h.inner.inner.inner)*2) + w.inner.inner.inner)]
        compute[(((((((((((blockIdx.z*12544) + blockIdx.x) + (threadIdx.z*392)) + (threadIdx.y*28))*2) + threadIdx.x) + (b.inner.inner.inner.inner.c.inner.inner.inner.fused*392)) + (h.inner.inner.inner*14))*2) + w.inner.inner.inner) + 25088)] = compute.local[(((((b.inner.inner.inner.inner.c.inner.inner.inner.fused*4) + h.inner.inner.inner)*2) + w.inner.inner.inner) + 16)]
      }
    }
  }
}

conv2d_yolo9_(64, 512, 28, 28, 1024, 3, 1, 1, 1, 1)_cuda(1) use 78.7849683 ms
